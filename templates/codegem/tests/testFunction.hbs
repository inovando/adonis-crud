import test from 'japa'
import supertest from 'supertest'
const BASE_URL = `http://${process.env.HOST}:${process.env.PORT}`
const request = supertest(BASE_URL)
import db from '@ioc:Adonis/Lucid/Database'
import faker from 'faker-br'
import { login, criaObra, criaFile, criaEmpresa, criaProprietario } from './utils/serviceTests'

test.group('{{modelToTest}}', (group) => {
  group.before(() => {
    process.env.ENV_SILENT = 'true'
  })
  group.beforeEach(() => {
    process.env.NODE_ENV = 'testing'
  })
  group.after(async () => {
    delete process.env.ENV_SILENT
    delete process.env.APP_KEY
  })
  group.afterEach(async () => {
    delete process.env.NODE_ENV
    // Truncate Table users after each test
    db.connection().truncate('servicos', true)
  })

  test('Deve ser possivel criar um {{modelToTest}}', async (assert) => {
    const credentials = {
      email: faker.internet.email(),
      password: faker.internet.password(),
    }

    const userLogado = await login(credentials)
    assert.equal(userLogado.status, 200)

    const payloadFile = {
      path: '/home/jean/Jean/Projetos/Venatus/api-venatus/tmp/uploads/beleza.gif',
      name: 'beleza.gif',
      user_id: userLogado.body.id,
    }
    const file = await criaFile(payloadFile)

    const newEmpresa = await criaEmpresa({ name: faker.name.firstName(), cnpj: faker.br.cnpj() })

    const newProprietario = await criaProprietario({
      nome: faker.name.firstName(),
      telefone: faker.phone.phoneNumber('(###) ###-####'),
      cnpj: faker.br.cnpj(),
      empresa_id: newEmpresa.id,
      endereco_bairro: faker.name.firstName(),
      endereco_cep: faker.address.zipCodeByState(),
      endereco_cidade: faker.address.city(),
      endereco_logradouro: faker.address.streetName(),
      endereco_uf: faker.address.state(),
    })

    const obraPayload = {
      name: faker.name.firstName(),
      endereco_cep: faker.address.zipCode('######-###'),
      endereco_cidade: faker.address.city(),
      endereco_logradouro: faker.address.streetName(),
      endereco_bairro: faker.address.state(),
      endereco_uf: faker.address.state(),
      file_id: file.id,
      empresa_id: newEmpresa.id,
      proprietario_id: newProprietario.id,
    }

    const obra = await criaObra(obraPayload)

    const zoneamentoPayload = {
      nome: `${faker.name.firstName()} ${faker.name.lastName()}`,
      status_zoneamento: faker.random.number(),
      obra_id: obra.id,
    }

    const newZoneamento = await request
      .post('/zoneamentos')
      .auth(`${userLogado.body.token}`, { type: 'bearer' })
      .send(zoneamentoPayload)

    assert.equal(newZoneamento.status, 201)
  })
  test('Deve ser possivel editar um {{pascalCase modelToTest}}', async (assert) => {
    const credentials = {
      email: faker.internet.email(),
      password: faker.internet.password(),
    }

    const userLogado = await login(credentials)
    assert.equal(userLogado.status, 200)

    const payloadFile = {
      path: '/home/jean/Jean/Projetos/Venatus/api-venatus/tmp/uploads/beleza.gif',
      name: 'beleza.gif',
      user_id: userLogado.body.id,
    }
    const file = await criaFile(payloadFile)

    const newEmpresa = await criaEmpresa({
      name: `${faker.name.firstName()} ${faker.name.lastName()}`,
      cnpj: faker.br.cnpj(),
    })

    const newProprietario = await criaProprietario({
      nome: faker.name.firstName(),
      telefone: faker.phone.phoneNumber('(###) ###-####'),
      cnpj: faker.br.cnpj(),
      empresa_id: newEmpresa.id,
      endereco_bairro: faker.name.firstName(),
      endereco_cep: faker.address.zipCodeByState(),
      endereco_cidade: faker.address.city(),
      endereco_logradouro: faker.address.streetName(),
      endereco_uf: faker.address.state(),
    })

    const obraPayload = {
      name: faker.name.firstName(),
      endereco_cep: faker.address.zipCode('######-###'),
      endereco_cidade: faker.address.city(),
      endereco_logradouro: faker.address.streetName(),
      endereco_bairro: faker.address.state(),
      endereco_uf: faker.address.state(),
      file_id: file.id,
      empresa_id: newEmpresa.id,
      proprietario_id: newProprietario.id,
    }

    const obra = await criaObra(obraPayload)

    const zoneamentoPayload = {
      nome: `${faker.name.firstName()} ${faker.name.firstName()} ${faker.name.lastName()}`,
      status_zoneamento: faker.random.number(),
      obra_id: obra.id,
    }

    const newZoneamento = await request
      .post('/{{dashCase urlToTest}}')
      .auth(`${userLogado.body.token}`, { type: 'bearer' })
      .send(zoneamentoPayload)

    assert.equal(newZoneamento.status, 201)
    const { body } = newZoneamento

    const zoneamentoAtualizado = await request
      .put(`/zoneamentos/${body.id}`)
      .auth(`${userLogado.body.token}`, { type: 'bearer' })
      .send(zoneamentoPayload)
    assert.equal(zoneamentoAtualizado.status, 200)
  })
  test('Deve ser possivel pegar pelo Id um Zoneamento', async (assert) => {
    const credentials = {
      email: faker.internet.email(),
      password: faker.internet.password(),
    }

    const userLogado = await login(credentials)
    assert.equal(userLogado.status, 200)

    const payloadFile = {
      path: '/home/jean/Jean/Projetos/Venatus/api-venatus/tmp/uploads/beleza.gif',
      name: 'beleza.gif',
      user_id: userLogado.body.id,
    }
    const file = await criaFile(payloadFile)

    const newEmpresa = await criaEmpresa({
      name: `${faker.name.firstName()} ${faker.name.lastName()}`,
      cnpj: faker.br.cnpj(),
    })

    const newProprietario = await criaProprietario({
      nome: faker.name.firstName(),
      telefone: faker.phone.phoneNumber('(###) ###-####'),
      cnpj: faker.br.cnpj(),
      empresa_id: newEmpresa.id,
      endereco_bairro: faker.name.firstName(),
      endereco_cep: faker.address.zipCodeByState(),
      endereco_cidade: faker.address.city(),
      endereco_logradouro: faker.address.streetName(),
      endereco_uf: faker.address.state(),
    })

    const obraPayload = {
      name: faker.name.firstName(),
      endereco_cep: faker.address.zipCode('######-###'),
      endereco_cidade: faker.address.city(),
      endereco_logradouro: faker.address.streetName(),
      endereco_bairro: faker.address.state(),
      endereco_uf: faker.address.state(),
      file_id: file.id,
      empresa_id: newEmpresa.id,
      proprietario_id: newProprietario.id,
    }

    const obra = await criaObra(obraPayload)

    const zoneamentoPayload = {
      nome: `${faker.name.firstName()} ${faker.name.lastName()}`,
      status_zoneamento: faker.random.number(),
      obra_id: obra.id,
    }

    const newZoneamento = await request
      .post('/zoneamentos')
      .auth(`${userLogado.body.token}`, { type: 'bearer' })
      .send(zoneamentoPayload)

    assert.equal(newZoneamento.status, 201)
    const { body } = newZoneamento

    const zoneamentoAtualizado = await request
      .get(`/zoneamentos/${body.id}`)
      .auth(`${userLogado.body.token}`, { type: 'bearer' })
      .send(zoneamentoPayload)
    assert.equal(zoneamentoAtualizado.status, 200)
  })
  test('Deve ser possivel deletar Zoneamento', async (assert) => {
    const credentials = {
      email: faker.internet.email(),
      password: faker.internet.password(),
    }

    const userLogado = await login(credentials)
    assert.equal(userLogado.status, 200)

    const payloadFile = {
      path: '/home/jean/Jean/Projetos/Venatus/api-venatus/tmp/uploads/beleza.gif',
      name: 'beleza.gif',
      user_id: userLogado.body.id,
    }
    const file = await criaFile(payloadFile)

    const newEmpresa = await criaEmpresa({
      name: `${faker.name.firstName()} ${faker.name.lastName()}`,
      cnpj: faker.br.cnpj(),
    })

    const newProprietario = await criaProprietario({
      nome: faker.name.firstName(),
      telefone: faker.phone.phoneNumber('(###) ###-####'),
      cnpj: faker.br.cnpj(),
      empresa_id: newEmpresa.id,
      endereco_bairro: faker.name.firstName(),
      endereco_cep: faker.address.zipCodeByState(),
      endereco_cidade: faker.address.city(),
      endereco_logradouro: faker.address.streetName(),
      endereco_uf: faker.address.state(),
    })

    const obraPayload = {
      name: faker.name.firstName(),
      endereco_cep: faker.address.zipCode('######-###'),
      endereco_cidade: faker.address.city(),
      endereco_logradouro: faker.address.streetName(),
      endereco_bairro: faker.address.state(),
      endereco_uf: faker.address.state(),
      file_id: file.id,
      empresa_id: newEmpresa.id,
      proprietario_id: newProprietario.id,
    }

    const obra = await criaObra(obraPayload)

    const zoneamentoPayload = {
      nome: `${faker.name.firstName()} ${faker.name.lastName()}`,
      status_zoneamento: faker.random.number(),
      obra_id: obra.id,
    }

    const newZoneamento = await request
      .post('/zoneamentos')
      .auth(`${userLogado.body.token}`, { type: 'bearer' })
      .send(zoneamentoPayload)

    assert.equal(newZoneamento.status, 201)
    const { body } = newZoneamento

    const zoneamentoAtualizado = await request
      .delete(`/zoneamentos/${body.id}`)
      .auth(`${userLogado.body.token}`, { type: 'bearer' })
      .send(zoneamentoPayload)
    assert.equal(zoneamentoAtualizado.status, 204)
  })
})
