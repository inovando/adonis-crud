import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
import Crud, { OptionsCrud } from '@ioc:AdonisCrud/Crud/Controller'
import AuthRepository from '@ioc:AuthRepository'
import BaseTransformer from 'App/Transformers/BaseTransformer'
import User from 'App/Models/User'
import { Response } from '@adonisjs/core/build/standalone'
@Crud<User>({
  repository: AuthRepository,
  storeProps: ['email', 'password', 'name'],
  updateProps: [],
  transformer: BaseTransformer,
})
export default class AuthController<User> {
  options: OptionsCrud<User>
  public async updatePassword(ctx: HttpContextContract) {
    return this.options.repository.updatePassword(ctx)
  }

  public async resetPassword(ctx: HttpContextContract) {
    return this.options.repository.resetPassword(ctx)
  }

  public async login(ctx: HttpContextContract) {
    const { auth, request, response } = ctx
    const email = request.input('email')
    const password = request.input('password')
    try {
      return this.options.repository.login({ email, password, auth })
    } catch (error) {
      return response.status(401).json({ message: error.message })
    }
  }

  public async me(ctx) {
    const { user } = ctx.auth
    return this.options.repository.me({ user })
  }
}
